Conceptos elementales de Responsive Design
  * Mostly Fluid, Colocación de columnas, Layout Shifter, Tiny tweaks, off canvas: Patrones de diseño

  * Viewport: area visible del navegador

  * Mobile First: Enpenzar del telefono -> La mejor 

  * Desktop First : Empenzar del computador 

  * Portrait - Landscape: Se tiene en cuenta el movimiento del celular, vertical u Horizontal

  * Google analitis: Se utiliza para ver por donde ingresan más los usuarios

Meta viwport
  *Meta name="viewport"
  	device-width  == iguala el ancho de mi dispositivo
	initial-scake == se referencia para que el contenido ocupe su lugar 1 representa 100

Medidad Relativas utiles en Responsive Design
  *Porcentaje: longitud referente al tamaño de los elementos padres
  *em: Unidad relativa al tamaño de fuente especificada mas cercana incluyendo al mismo elemento si lo        tiene especificado
  *rem: unidad relativa al tamaño de fuente especificado más lejano(html,body)
  *vw/vh: unidad relativa porcentual con respecto al viewport 

Media queries
  *cambia condicion de style dependiendo de la necesidad, se compone con una midia type y una condición

Formas de incluir media queries
  *podemos crear condiciones dentro del Html para aplicar cada estilo que requeramos
  	<link rel="stylesheet" href="css/media.cc" media="screen and (max-wedth:768px)"/>
  *Podemos crear nuestras condicones dentro de nuestra hoja de estilos principal
  	@media screen and (max-width: 780px) { body { border: 10px solid green; } }
  *Dentro del mismo Html mediante sytle
  	<style> ... </style>

Diseño elástico con max-width y flex-wrap
  *flex-wrap: wrap; comtrola el flexbox indicando si es one line o multi line en este caso seria multi.

Ajustando nuestro portafolio
  *Es mejor utilizar "auto" que "100%" por render
  *cuando algo tiene "display: flex" no interactua con text-aling

Css positions
  *nos ayuda a super poner un elemento uno dentro del otro o moverlo de una manera muy particular
  *position: 
       *z-index: ayuda a establecer o a sobre poner un elemento poniendole un valor mayor, ejemplo 1 < 2 
       -- static: por defecto
       -- realitive: Nos permite movernos sin embargo no pierde su estado original
       -- absolute: sera relativo al elemento padre "relative" más cercano puerde el estado original
       -- fixed: cuando una propiedad toma este valor esta por encima de todo
       -- sticky: sobre pone un elemento por encima de todo cuando alcanza la posicion declarada (top: 0)
Videos Html5
  *los videos por defecto no tiene controles asi que los agregamos con "controls"

Videos insertado
  *iframe: es una etiqueta que nos permite relacionar otro sitio web al nuestro
       -- frameborder: define si contiene borde 

Fuentes de Iconos
  *@font-face: con este atributo podemos crear tipo de fuentes personalizadas
       -- font-family: 'icomoon'; : Establecemos el nombre de la fuente en este caso "icomoon"
       -- src: establece los formatos fuente que se aplicaran de acuerdo al navegador
   
  *[class^="icon-"] : declara que cualquier elemento que contenga una clace iniciando con "icon-"
  *[class*=" icon-"] : declara que cualquier elemento que contenga en algun momento de su clase tenga "icon-"

  *i : general mente pone las letras en cursiva pero tambien se utiliza mucho para iconos

Añadir un menú de hamburgesa
  *line-height : nos permire ubicar un opjeto de manera vertical funcionando con display en block en flex utilizamos align-items
  
  *text-align : nos permite realizar la unicación de un elemento de forma horizontal en block, en flex utilizamos justify-content

Posicionando el menú
  *recuerda que una condiconal css indica que cuando dos clases estan juntas es decir sin espacios estte la interpreta como "&"
  
  *transition : es una propiedad que nos permite realizar una animacion de transación de un elementoo en el tiempo declarado

Añadiendo Javascript para detección de eventos
  *console.log('Mensaje Hola') : comando JS que nos permite enviar un mensaje de consola
  
  *document.querySelector('.menu') : selector, en este ejemplo seleccionamos el elemento con clase "menu"
        -- .classList.add('is-menu-active'); : nos permite unir una nueva class, recuerda que como estamos añadiendo una clase 
	    no necesita del "." al inicio
	-- .classList.remove('is-menu-active'); : nos permite remover una clase
	-- menu.classList.contains('is-menu-active') : nos pemite verificar dentro del constante menu la presencia de "is-menu-active"

  *const : nos ayuda a declarar una variable de tipo constante

  *addEventListener : es una propiedad que agrega un evento a un elemento
        -- ('click') : al realizar "click" realizara la siguiente funcion mencionada
	   Ejm: burgerbutton.addEventListener('click', hideShow);

Media queries con JavaScript
  * window.matchMedia('screen and (max-width: 767px)'); media query en Javascript "matchMedia" resive una consulta a los medios
  	-- matches : resivimos si la condicion se cumplio o no 
  *addListener(): es una función que invoca otro función

  *removeEventListener: es importante para la optimación de la pagina realizar un remuve de los listener cuando no se esten utilizando
  
creando un servidor de archivos estáticos con Node
  *Servidor de archivos estaticos: es un servicio de tipo estatico
  *npm: nos permite verificar dentro de la linea de comando si esta instalado Node js o con la versión de npm -v, gestor de paquetes
  *npm -g install static-server: instalamos de manera global(-g) el paquete estatico "static-server"
  *http://192.168.1.5:9080/Html : esta ruta nos sirve para poder visualizar el sitio desde nuestro movil, importante estar en la misma		red de wifi
  *static-server: es un comando aplicado en la terminal que nos ayuda a activar el servidor estatico 

